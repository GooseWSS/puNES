{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define COMPAT_ATTRIBUTE attribute\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     vec2 _texCoord1;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct out_vertex {\n"
"    vec2 _texCoord1;\n"
"};\n"
"vec4 _oPosition1;\n"
"out_vertex _ret_0;\n"
"vec4 _r0008;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    _r0008 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];\n"
"    _oPosition1 = _r0008;\n"
"    _ret_0._texCoord1 = TexCoord.xy;\n"
"    gl_Position = _r0008;\n"
"    TEX0.xy = TexCoord.xy;\n"
"    return;\n"
"    TEX0.xy = _ret_0._texCoord1;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     vec2 _texCoord;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct out_vertex {\n"
"    vec2 _texCoord;\n"
"};\n"
"vec4 _ret_0;\n"
"float _TMP18;\n"
"float _TMP17;\n"
"float _TMP16;\n"
"vec3 _TMP15;\n"
"float _TMP14;\n"
"float _TMP24;\n"
"float _TMP23;\n"
"float _TMP22;\n"
"float _TMP21;\n"
"vec3 _TMP20;\n"
"vec3 _TMP19;\n"
"vec3 _TMP12;\n"
"vec3 _TMP11;\n"
"vec3 _TMP10;\n"
"vec3 _TMP9;\n"
"vec4 _TMP8;\n"
"vec4 _TMP7;\n"
"vec4 _TMP6;\n"
"vec4 _TMP5;\n"
"vec4 _TMP4;\n"
"vec4 _TMP3;\n"
"vec4 _TMP2;\n"
"vec4 _TMP1;\n"
"vec2 _TMP0;\n"
"uniform sampler2D Texture;\n"
"input_dummy _IN1;\n"
"vec2 _c0038;\n"
"vec2 _c0048;\n"
"vec2 _c0058;\n"
"vec2 _c0068;\n"
"vec2 _c0078;\n"
"vec2 _c0098;\n"
"vec2 _c0108;\n"
"vec4 _r0130;\n"
"vec4 _v0130;\n"
"vec3 _r0140;\n"
"vec3 _r0142;\n"
"vec3 _TMP143;\n"
"vec3 _TMP151;\n"
"vec3 _TMP163;\n"
"vec3 _x0164;\n"
"vec3 _TMP169;\n"
"vec3 _x0170;\n"
"vec3 _TMP175;\n"
"vec3 _x0176;\n"
"vec3 _TMP185;\n"
"vec3 _x0186;\n"
"vec3 _TMP195;\n"
"vec3 _x0196;\n"
"float _c0202;\n"
"float _a0204;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _TextureSize;\n"
"    vec3 _color;\n"
"    vec2 _dx;\n"
"    vec2 _dy;\n"
"    vec2 _pix_coord;\n"
"    vec2 _tc;\n"
"    vec2 _fp;\n"
"    vec3 _c00;\n"
"    vec3 _c01;\n"
"    vec3 _c02;\n"
"    vec3 _c03;\n"
"    vec3 _c10;\n"
"    vec3 _c11;\n"
"    vec3 _c12;\n"
"    vec3 _c13;\n"
"    vec3 _min_sample;\n"
"    vec3 _max_sample;\n"
"    vec3 _color0;\n"
"    vec3 _color1;\n"
"    float _pos1;\n"
"    vec3 _lum0;\n"
"    vec3 _lum1;\n"
"    float _mod_factor;\n"
"    vec3 _dotMaskWeights;\n"
"    _TextureSize = vec2(TextureSize.x, TextureSize.y);\n"
"    _dx = vec2(1.00000000E+00/_TextureSize.x, 0.00000000E+00);\n"
"    _dy = vec2(0.00000000E+00, 1.00000000E+00/_TextureSize.y);\n"
"    _pix_coord = TEX0.xy*_TextureSize + vec2( -5.00000000E-01, 5.00000000E-01);\n"
"    _TMP0 = floor(_pix_coord);\n"
"    _tc = (_TMP0 + vec2( 5.00000000E-01, 5.00000000E-01))/_TextureSize;\n"
"    _fp = fract(_pix_coord);\n"
"    _c0038 = (_tc - _dx) - _dy;\n"
"    _TMP1 = COMPAT_TEXTURE(Texture, _c0038);\n"
"    _TMP16 = pow(_TMP1.x, 2.40000010E+00);\n"
"    _TMP17 = pow(_TMP1.y, 2.40000010E+00);\n"
"    _TMP18 = pow(_TMP1.z, 2.40000010E+00);\n"
"    _c00 = vec3(_TMP16, _TMP17, _TMP18);\n"
"    _c0048 = _tc - _dy;\n"
"    _TMP2 = COMPAT_TEXTURE(Texture, _c0048);\n"
"    _TMP16 = pow(_TMP2.x, 2.40000010E+00);\n"
"    _TMP17 = pow(_TMP2.y, 2.40000010E+00);\n"
"    _TMP18 = pow(_TMP2.z, 2.40000010E+00);\n"
"    _c01 = vec3(_TMP16, _TMP17, _TMP18);\n"
"    _c0058 = (_tc + _dx) - _dy;\n"
"    _TMP3 = COMPAT_TEXTURE(Texture, _c0058);\n"
"    _TMP16 = pow(_TMP3.x, 2.40000010E+00);\n"
"    _TMP17 = pow(_TMP3.y, 2.40000010E+00);\n"
"    _TMP18 = pow(_TMP3.z, 2.40000010E+00);\n"
"    _c02 = vec3(_TMP16, _TMP17, _TMP18);\n"
"    _c0068 = (_tc + 2.00000000E+00*_dx) - _dy;\n"
"    _TMP4 = COMPAT_TEXTURE(Texture, _c0068);\n"
"    _TMP16 = pow(_TMP4.x, 2.40000010E+00);\n"
"    _TMP17 = pow(_TMP4.y, 2.40000010E+00);\n"
"    _TMP18 = pow(_TMP4.z, 2.40000010E+00);\n"
"    _c03 = vec3(_TMP16, _TMP17, _TMP18);\n"
"    _c0078 = _tc - _dx;\n"
"    _TMP5 = COMPAT_TEXTURE(Texture, _c0078);\n"
"    _TMP16 = pow(_TMP5.x, 2.40000010E+00);\n"
"    _TMP17 = pow(_TMP5.y, 2.40000010E+00);\n"
"    _TMP18 = pow(_TMP5.z, 2.40000010E+00);\n"
"    _c10 = vec3(_TMP16, _TMP17, _TMP18);\n"
"    _TMP6 = COMPAT_TEXTURE(Texture, _tc);\n"
"    _TMP16 = pow(_TMP6.x, 2.40000010E+00);\n"
"    _TMP17 = pow(_TMP6.y, 2.40000010E+00);\n"
"    _TMP18 = pow(_TMP6.z, 2.40000010E+00);\n"
"    _c11 = vec3(_TMP16, _TMP17, _TMP18);\n"
"    _c0098 = _tc + _dx;\n"
"    _TMP7 = COMPAT_TEXTURE(Texture, _c0098);\n"
"    _TMP16 = pow(_TMP7.x, 2.40000010E+00);\n"
"    _TMP17 = pow(_TMP7.y, 2.40000010E+00);\n"
"    _TMP18 = pow(_TMP7.z, 2.40000010E+00);\n"
"    _c12 = vec3(_TMP16, _TMP17, _TMP18);\n"
"    _c0108 = _tc + 2.00000000E+00*_dx;\n"
"    _TMP8 = COMPAT_TEXTURE(Texture, _c0108);\n"
"    _TMP16 = pow(_TMP8.x, 2.40000010E+00);\n"
"    _TMP17 = pow(_TMP8.y, 2.40000010E+00);\n"
"    _TMP18 = pow(_TMP8.z, 2.40000010E+00);\n"
"    _c13 = vec3(_TMP16, _TMP17, _TMP18);\n"
"    _TMP9 = min(_c01, _c11);\n"
"    _TMP10 = min(_c02, _c12);\n"
"    _min_sample = min(_TMP9, _TMP10);\n"
"    _TMP11 = max(_c01, _c11);\n"
"    _TMP12 = max(_c02, _c12);\n"
"    _max_sample = max(_TMP11, _TMP12);\n"
"    _v0130 = vec4(_fp.x*_fp.x*_fp.x, _fp.x*_fp.x, _fp.x, 1.00000000E+00);\n"
"    _r0130.x = dot(vec4( -5.00000000E-01, 1.00000000E+00, -5.00000000E-01, 0.00000000E+00), _v0130);\n"
"    _r0130.y = dot(vec4( 1.50000000E+00, -2.50000000E+00, 0.00000000E+00, 1.00000000E+00), _v0130);\n"
"    _r0130.z = dot(vec4( -1.50000000E+00, 2.00000000E+00, 5.00000000E-01, 0.00000000E+00), _v0130);\n"
"    _r0130.w = dot(vec4( 5.00000000E-01, -5.00000000E-01, 0.00000000E+00, 0.00000000E+00), _v0130);\n"
"    _r0140 = _r0130.x*_c00;\n"
"    _r0140 = _r0140 + _r0130.y*_c01;\n"
"    _r0140 = _r0140 + _r0130.z*_c02;\n"
"    _r0140 = _r0140 + _r0130.w*_c03;\n"
"    _r0142 = _r0130.x*_c10;\n"
"    _r0142 = _r0142 + _r0130.y*_c11;\n"
"    _r0142 = _r0142 + _r0130.z*_c12;\n"
"    _r0142 = _r0142 + _r0130.w*_c13;\n"
"    _TMP19 = min(_max_sample, _r0140);\n"
"    _TMP143 = max(_min_sample, _TMP19);\n"
"    _color0 = _r0140 + 8.00000012E-01*(_TMP143 - _r0140);\n"
"    _TMP19 = min(_max_sample, _r0142);\n"
"    _TMP151 = max(_min_sample, _TMP19);\n"
"    _color1 = _r0142 + 8.00000012E-01*(_TMP151 - _r0142);\n"
"    _pos1 = 1.00000000E+00 - _fp.y;\n"
"    _lum0 = vec3( 8.60000014E-01, 8.60000014E-01, 8.60000014E-01) + _color0*vec3( 1.39999986E-01, 1.39999986E-01, 1.39999986E-01);\n"
"    _lum1 = vec3( 8.60000014E-01, 8.60000014E-01, 8.60000014E-01) + _color1*vec3( 1.39999986E-01, 1.39999986E-01, 1.39999986E-01);\n"
"    _x0164 = _fp.y/(_lum0 + 1.00000001E-07);\n"
"    _TMP20 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0164);\n"
"    _TMP163 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP20);\n"
"    _x0170 = _pos1/(_lum1 + 1.00000001E-07);\n"
"    _TMP20 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0170);\n"
"    _TMP169 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP20);\n"
"    _x0176 = (-7.20000029E+00*_TMP163)*_TMP163;\n"
"    _TMP16 = pow(2.71828198E+00, _x0176.x);\n"
"    _TMP17 = pow(2.71828198E+00, _x0176.y);\n"
"    _TMP18 = pow(2.71828198E+00, _x0176.z);\n"
"    _TMP175 = vec3(_TMP16, _TMP17, _TMP18);\n"
"    _x0186 = (-7.20000029E+00*_TMP169)*_TMP169;\n"
"    _TMP16 = pow(2.71828198E+00, _x0186.x);\n"
"    _TMP17 = pow(2.71828198E+00, _x0186.y);\n"
"    _TMP18 = pow(2.71828198E+00, _x0186.z);\n"
"    _TMP185 = vec3(_TMP16, _TMP17, _TMP18);\n"
"    _x0196 = _color0*_TMP175 + _color1*_TMP185;\n"
"    _TMP20 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0196);\n"
"    _TMP195 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP20);\n"
"    _color = _TMP195*vec3( 1.50000000E+00, 1.50000000E+00, 1.50000000E+00);\n"
"    _mod_factor = (TEX0.x*OutputSize.x*TextureSize.x)/InputSize.x;\n"
"    _a0204 = _mod_factor/2.00000000E+00;\n"
"    _TMP21 = abs(_a0204);\n"
"    _TMP22 = fract(_TMP21);\n"
"    _TMP23 = abs(2.00000000E+00);\n"
"    _c0202 = _TMP22*_TMP23;\n"
"    if (_mod_factor < 0.00000000E+00) { \n"
"        _TMP24 = -_c0202;\n"
"    } else {\n"
"        _TMP24 = _c0202;\n"
"    } \n"
"    _TMP14 = floor(_TMP24);\n"
"    _dotMaskWeights = vec3( 1.00000000E+00, 6.99999988E-01, 1.00000000E+00) + _TMP14*vec3( -3.00000012E-01, 3.00000012E-01, -3.00000012E-01);\n"
"    _TMP15 = vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00) + (_dotMaskWeights - vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _color.xyz = _color.xyz*_TMP15;\n"
"    _TMP16 = pow(_color.x, 4.54545438E-01);\n"
"    _TMP17 = pow(_color.y, 4.54545438E-01);\n"
"    _TMP18 = pow(_color.z, 4.54545438E-01);\n"
"    _color = vec3(_TMP16, _TMP17, _TMP18);\n"
"    _ret_0 = vec4(_color.x, _color.y, _color.z, 1.00000000E+00);\n"
"    FragColor = _ret_0;\n"
"    return;\n"
"} \n"
"#endif\n"
},
