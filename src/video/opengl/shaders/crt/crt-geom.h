{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define COMPAT_ATTRIBUTE attribute\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     vec2 VARTextureSize;\n"
"COMPAT_VARYING     vec2 VARcosangle;\n"
"COMPAT_VARYING     vec2 VARsinangle;\n"
"COMPAT_VARYING     vec3 VARstretch;\n"
"COMPAT_VARYING     vec2 VARilfac;\n"
"COMPAT_VARYING     float VARmod_factor;\n"
"COMPAT_VARYING     vec2 VARone;\n"
"COMPAT_VARYING     vec2 _texCoord1;\n"
"COMPAT_VARYING     vec4 _color1;\n"
"COMPAT_VARYING     vec4 _position1;\n"
"COMPAT_VARYING     vec2 _tex_coord;\n"
"struct input_dummy {\n"
"    vec2 _tex_coord;\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"};\n"
"struct out_vertex {\n"
"    vec4 _position1;\n"
"    vec4 _color1;\n"
"    vec2 _texCoord1;\n"
"    vec2 VARone;\n"
"    float VARmod_factor;\n"
"    vec2 VARilfac;\n"
"    vec3 VARstretch;\n"
"    vec2 VARsinangle;\n"
"    vec2 VARcosangle;\n"
"    vec2 VARTextureSize;\n"
"};\n"
"out_vertex _ret_0;\n"
"float _TMP1;\n"
"float _TMP12;\n"
"float _TMP11;\n"
"vec2 _TMP10;\n"
"vec2 _TMP9;\n"
"float _TMP25;\n"
"float _TMP24;\n"
"float _TMP23;\n"
"float _TMP22;\n"
"float _TMP21;\n"
"float _TMP20;\n"
"float _TMP29;\n"
"vec2 _TMP8;\n"
"vec2 _TMP7;\n"
"float _TMP19;\n"
"float _TMP18;\n"
"float _TMP17;\n"
"float _TMP30;\n"
"float _TMP16;\n"
"float _TMP15;\n"
"float _TMP14;\n"
"float _TMP13;\n"
"float _TMP28;\n"
"float _TMP27;\n"
"float _TMP26;\n"
"float _TMP6;\n"
"float _TMP5;\n"
"float _TMP4;\n"
"float _TMP3;\n"
"input_dummy _IN1;\n"
"vec4 _r0037;\n"
"vec2 _c0051;\n"
"vec2 _lo0051;\n"
"vec2 _hi0051;\n"
"vec2 _TMP330051;\n"
"float _c0053;\n"
"vec2 _xy0053;\n"
"vec2 _point0053;\n"
"vec2 _tang0053;\n"
"vec2 _poc0053;\n"
"float _A0053;\n"
"float _B0053;\n"
"float _C0053;\n"
"float _a0053;\n"
"vec2 _uv0053;\n"
"float _r0053;\n"
"float _A0055;\n"
"float _B0055;\n"
"float _C0055;\n"
"float _a0061;\n"
"float _a0071;\n"
"float _negate0075;\n"
"float _x0075;\n"
"float _ret0075;\n"
"float _a0079;\n"
"float _a0083;\n"
"float _a0087;\n"
"vec2 _uv0089;\n"
"float _r0089;\n"
"float _x0089;\n"
"float _D0089;\n"
"float _a0101;\n"
"float _a0103;\n"
"vec2 _uv0107;\n"
"float _r0107;\n"
"float _x0107;\n"
"float _D0107;\n"
"float _a0119;\n"
"float _a0121;\n"
"vec2 _uv0125;\n"
"float _r0125;\n"
"float _x0125;\n"
"float _D0125;\n"
"float _a0137;\n"
"float _a0139;\n"
"vec2 _uv0143;\n"
"float _r0143;\n"
"float _x0143;\n"
"float _D0143;\n"
"float _a0155;\n"
"float _a0157;\n"
"float _a0161;\n"
"float _b0161;\n"
"float _x0163;\n"
"float _TMP164;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 COLOR;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 COL0;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    out_vertex _OUT;\n"
"    _r0037 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0037 = _r0037 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0037 = _r0037 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0037 = _r0037 + VertexCoord.w*MVPMatrix[3];\n"
"    _TMP3 = sin(0.00000000E+00);\n"
"    _TMP4 = sin(0.00000000E+00);\n"
"    _OUT.VARsinangle = vec2(_TMP3, _TMP4);\n"
"    _TMP5 = cos(0.00000000E+00);\n"
"    _TMP6 = cos(0.00000000E+00);\n"
"    _OUT.VARcosangle = vec2(_TMP5, _TMP6);\n"
"    _xy0053 = (-2.00000000E+00*_OUT.VARsinangle)/(1.00000000E+00 + 1.33333337E+00*_OUT.VARcosangle.x*_OUT.VARcosangle.y);\n"
"    _TMP26 = dot(_xy0053, _xy0053);\n"
"    _A0055 = _TMP26 + 2.25000000E+00;\n"
"    _TMP27 = dot(_xy0053, _OUT.VARsinangle);\n"
"    _B0055 = 2.00000000E+00*(2.00000000E+00*(_TMP27 - 1.50000000E+00*_OUT.VARcosangle.x*_OUT.VARcosangle.y) - 2.25000000E+00);\n"
"    _C0055 = 2.25000000E+00 + 6.00000000E+00*_OUT.VARcosangle.x*_OUT.VARcosangle.y;\n"
"    _a0061 = _B0055*_B0055 - 4.00000000E+00*_A0055*_C0055;\n"
"    _TMP29 = inversesqrt(_a0061);\n"
"    _TMP28 = 1.00000000E+00/_TMP29;\n"
"    _c0053 = (-_B0055 - _TMP28)/(2.00000000E+00*_A0055);\n"
"    _point0053 = vec2(_c0053, _c0053)*_xy0053;\n"
"    _point0053 = _point0053 - vec2( -2.00000000E+00, -2.00000000E+00)*_OUT.VARsinangle;\n"
"    _point0053 = _point0053/vec2( 2.00000000E+00, 2.00000000E+00);\n"
"    _tang0053 = _OUT.VARsinangle/_OUT.VARcosangle;\n"
"    _poc0053 = _point0053/_OUT.VARcosangle;\n"
"    _TMP13 = dot(_tang0053, _tang0053);\n"
"    _A0053 = _TMP13 + 1.00000000E+00;\n"
"    _TMP14 = dot(_poc0053, _tang0053);\n"
"    _B0053 = -2.00000000E+00*_TMP14;\n"
"    _TMP15 = dot(_poc0053, _poc0053);\n"
"    _C0053 = _TMP15 - 1.00000000E+00;\n"
"    _a0071 = _B0053*_B0053 - 4.00000000E+00*_A0053*_C0053;\n"
"    _TMP29 = inversesqrt(_a0071);\n"
"    _TMP16 = 1.00000000E+00/_TMP29;\n"
"    _a0053 = (-_B0053 + _TMP16)/(2.00000000E+00*_A0053);\n"
"    _uv0053 = (_point0053 - _a0053*_OUT.VARsinangle)/_OUT.VARcosangle;\n"
"    _negate0075 = float((_a0053 < 0.00000000E+00));\n"
"    _x0075 = abs(_a0053);\n"
"    _ret0075 = -1.87292993E-02*_x0075;\n"
"    _ret0075 = _ret0075 + 7.42610022E-02;\n"
"    _ret0075 = _ret0075*_x0075;\n"
"    _ret0075 = _ret0075 - 2.12114394E-01;\n"
"    _ret0075 = _ret0075*_x0075;\n"
"    _ret0075 = _ret0075 + 1.57072902E+00;\n"
"    _a0079 = 1.00000000E+00 - _x0075;\n"
"    _TMP29 = inversesqrt(_a0079);\n"
"    _TMP30 = 1.00000000E+00/_TMP29;\n"
"    _ret0075 = _ret0075*_TMP30;\n"
"    _ret0075 = _ret0075 - 2.00000000E+00*_negate0075*_ret0075;\n"
"    _TMP17 = _negate0075*3.14159298E+00 + _ret0075;\n"
"    _a0083 = 2.00000000E+00*_TMP17;\n"
"    _TMP18 = abs(_a0083);\n"
"    _r0053 = max(_TMP18, 9.99999975E-06);\n"
"    _a0087 = _r0053/2.00000000E+00;\n"
"    _TMP19 = sin(_a0087);\n"
"    _c0051 = (_uv0053*_r0053)/_TMP19;\n"
"    _uv0089 = vec2(-5.00000000E-01, _c0051.y);\n"
"    _TMP20 = dot(_uv0089, _uv0089);\n"
"    _TMP29 = inversesqrt(_TMP20);\n"
"    _TMP21 = 1.00000000E+00/_TMP29;\n"
"    _TMP22 = abs(_TMP21);\n"
"    _r0089 = max(_TMP22, 9.99999975E-06);\n"
"    _a0101 = _r0089/2.00000000E+00;\n"
"    _TMP23 = sin(_a0101);\n"
"    _uv0089 = _uv0089*(_TMP23/_r0089);\n"
"    _a0103 = _r0089/2.00000000E+00;\n"
"    _TMP24 = cos(_a0103);\n"
"    _x0089 = 1.00000000E+00 - _TMP24;\n"
"    _TMP25 = dot(_uv0089, _OUT.VARsinangle);\n"
"    _D0089 = 7.50000000E-01 + _x0089*_OUT.VARcosangle.x*_OUT.VARcosangle.y + _TMP25;\n"
"    _TMP7 = (1.50000000E+00*(_uv0089*_OUT.VARcosangle - _x0089*_OUT.VARsinangle))/_D0089;\n"
"    _uv0107 = vec2(_c0051.x, -3.75000000E-01);\n"
"    _TMP20 = dot(_uv0107, _uv0107);\n"
"    _TMP29 = inversesqrt(_TMP20);\n"
"    _TMP21 = 1.00000000E+00/_TMP29;\n"
"    _TMP22 = abs(_TMP21);\n"
"    _r0107 = max(_TMP22, 9.99999975E-06);\n"
"    _a0119 = _r0107/2.00000000E+00;\n"
"    _TMP23 = sin(_a0119);\n"
"    _uv0107 = _uv0107*(_TMP23/_r0107);\n"
"    _a0121 = _r0107/2.00000000E+00;\n"
"    _TMP24 = cos(_a0121);\n"
"    _x0107 = 1.00000000E+00 - _TMP24;\n"
"    _TMP25 = dot(_uv0107, _OUT.VARsinangle);\n"
"    _D0107 = 7.50000000E-01 + _x0107*_OUT.VARcosangle.x*_OUT.VARcosangle.y + _TMP25;\n"
"    _TMP8 = (1.50000000E+00*(_uv0107*_OUT.VARcosangle - _x0107*_OUT.VARsinangle))/_D0107;\n"
"    _lo0051 = vec2(_TMP7.x, _TMP8.y)/vec2( 1.00000000E+00, 7.50000000E-01);\n"
"    _uv0125 = vec2(5.00000000E-01, _c0051.y);\n"
"    _TMP20 = dot(_uv0125, _uv0125);\n"
"    _TMP29 = inversesqrt(_TMP20);\n"
"    _TMP21 = 1.00000000E+00/_TMP29;\n"
"    _TMP22 = abs(_TMP21);\n"
"    _r0125 = max(_TMP22, 9.99999975E-06);\n"
"    _a0137 = _r0125/2.00000000E+00;\n"
"    _TMP23 = sin(_a0137);\n"
"    _uv0125 = _uv0125*(_TMP23/_r0125);\n"
"    _a0139 = _r0125/2.00000000E+00;\n"
"    _TMP24 = cos(_a0139);\n"
"    _x0125 = 1.00000000E+00 - _TMP24;\n"
"    _TMP25 = dot(_uv0125, _OUT.VARsinangle);\n"
"    _D0125 = 7.50000000E-01 + _x0125*_OUT.VARcosangle.x*_OUT.VARcosangle.y + _TMP25;\n"
"    _TMP9 = (1.50000000E+00*(_uv0125*_OUT.VARcosangle - _x0125*_OUT.VARsinangle))/_D0125;\n"
"    _uv0143 = vec2(_c0051.x, 3.75000000E-01);\n"
"    _TMP20 = dot(_uv0143, _uv0143);\n"
"    _TMP29 = inversesqrt(_TMP20);\n"
"    _TMP21 = 1.00000000E+00/_TMP29;\n"
"    _TMP22 = abs(_TMP21);\n"
"    _r0143 = max(_TMP22, 9.99999975E-06);\n"
"    _a0155 = _r0143/2.00000000E+00;\n"
"    _TMP23 = sin(_a0155);\n"
"    _uv0143 = _uv0143*(_TMP23/_r0143);\n"
"    _a0157 = _r0143/2.00000000E+00;\n"
"    _TMP24 = cos(_a0157);\n"
"    _x0143 = 1.00000000E+00 - _TMP24;\n"
"    _TMP25 = dot(_uv0143, _OUT.VARsinangle);\n"
"    _D0143 = 7.50000000E-01 + _x0143*_OUT.VARcosangle.x*_OUT.VARcosangle.y + _TMP25;\n"
"    _TMP10 = (1.50000000E+00*(_uv0143*_OUT.VARcosangle - _x0143*_OUT.VARsinangle))/_D0143;\n"
"    _hi0051 = vec2(_TMP9.x, _TMP10.y)/vec2( 1.00000000E+00, 7.50000000E-01);\n"
"    _a0161 = _hi0051.x - _lo0051.x;\n"
"    _b0161 = _hi0051.y - _lo0051.y;\n"
"    _TMP11 = max(_a0161, _b0161);\n"
"    _TMP330051 = ((_hi0051 + _lo0051)*vec2( 1.00000000E+00, 7.50000000E-01))*5.00000000E-01;\n"
"    _OUT.VARstretch = vec3(_TMP330051.x, _TMP330051.y, _TMP11);\n"
"    _OUT.VARTextureSize = vec2(TextureSize.x, TextureSize.y);\n"
"    _x0163 = InputSize.y/2.00000000E+02;\n"
"    _TMP1 = floor(_x0163);\n"
"    _TMP12 = min(2.00000000E+00, _TMP1);\n"
"    _TMP164 = max(1.00000000E+00, _TMP12);\n"
"    _OUT.VARilfac = vec2(1.00000000E+00, _TMP164);\n"
"    _OUT.VARone = _OUT.VARilfac/_OUT.VARTextureSize;\n"
"    _OUT.VARmod_factor = (TexCoord.x*TextureSize.x*OutputSize.x)/InputSize.x;\n"
"    _ret_0._position1 = _r0037;\n"
"    _ret_0._color1 = COLOR;\n"
"    _ret_0._texCoord1 = TexCoord.xy;\n"
"    VARone = _OUT.VARone;\n"
"    VARmod_factor = _OUT.VARmod_factor;\n"
"    VARilfac = _OUT.VARilfac;\n"
"    VARstretch = _OUT.VARstretch;\n"
"    VARsinangle = _OUT.VARsinangle;\n"
"    VARcosangle = _OUT.VARcosangle;\n"
"    VARTextureSize = _OUT.VARTextureSize;\n"
"    gl_Position = _r0037;\n"
"    COL0 = COLOR;\n"
"    TEX0.xy = TexCoord.xy;\n"
"    return;\n"
"    COL0 = _ret_0._color1;\n"
"    TEX0.xy = _ret_0._texCoord1;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     vec2 VARTextureSize;\n"
"COMPAT_VARYING     vec2 VARcosangle;\n"
"COMPAT_VARYING     vec2 VARsinangle;\n"
"COMPAT_VARYING     vec3 VARstretch;\n"
"COMPAT_VARYING     vec2 VARilfac;\n"
"COMPAT_VARYING     float VARmod_factor;\n"
"COMPAT_VARYING     vec2 VARone;\n"
"COMPAT_VARYING     vec2 _texCoord;\n"
"COMPAT_VARYING     vec4 _color1;\n"
"COMPAT_VARYING     vec2 _tex_coord;\n"
"struct input_dummy {\n"
"    vec2 _tex_coord;\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"};\n"
"struct out_vertex {\n"
"    vec4 _color1;\n"
"    vec2 _texCoord;\n"
"    vec2 VARone;\n"
"    float VARmod_factor;\n"
"    vec2 VARilfac;\n"
"    vec3 VARstretch;\n"
"    vec2 VARsinangle;\n"
"    vec2 VARcosangle;\n"
"    vec2 VARTextureSize;\n"
"};\n"
"vec4 _ret_0;\n"
"float _TMP65;\n"
"float _TMP64;\n"
"float _TMP63;\n"
"float _TMP36;\n"
"float _TMP49;\n"
"float _TMP48;\n"
"float _TMP47;\n"
"float _TMP46;\n"
"vec4 _TMP34;\n"
"float _TMP33;\n"
"vec4 _TMP61;\n"
"float _TMP57;\n"
"float _TMP56;\n"
"float _TMP55;\n"
"float _TMP54;\n"
"vec4 _TMP60;\n"
"float _TMP73;\n"
"float _TMP72;\n"
"float _TMP71;\n"
"float _TMP70;\n"
"vec4 _TMP59;\n"
"vec4 _TMP32;\n"
"float _TMP31;\n"
"vec4 _TMP30;\n"
"float _TMP29;\n"
"vec4 _TMP28;\n"
"vec4 _TMP58;\n"
"vec4 _TMP26;\n"
"vec4 _TMP24;\n"
"vec4 _TMP22;\n"
"vec4 _TMP20;\n"
"vec4 _TMP25;\n"
"vec4 _TMP23;\n"
"vec4 _TMP21;\n"
"vec4 _TMP19;\n"
"vec4 _TMP17;\n"
"vec4 _TMP15;\n"
"vec4 _TMP13;\n"
"vec4 _TMP11;\n"
"vec4 _TMP16;\n"
"vec4 _TMP14;\n"
"vec4 _TMP12;\n"
"vec4 _TMP10;\n"
"float _TMP9;\n"
"vec4 _TMP8;\n"
"vec4 _TMP7;\n"
"float _TMP53;\n"
"float _TMP52;\n"
"float _TMP51;\n"
"float _TMP50;\n"
"vec4 _TMP6;\n"
"vec2 _TMP5;\n"
"float _TMP4;\n"
"float _TMP45;\n"
"float _TMP3;\n"
"float _TMP44;\n"
"vec2 _TMP2;\n"
"vec2 _TMP1;\n"
"vec2 _TMP0;\n"
"float _TMP43;\n"
"float _TMP42;\n"
"float _TMP41;\n"
"float _TMP69;\n"
"float _TMP40;\n"
"float _TMP39;\n"
"float _TMP38;\n"
"float _TMP37;\n"
"float _TMP68;\n"
"float _TMP67;\n"
"float _TMP66;\n"
"out_vertex _VAR1;\n"
"input_dummy _IN1;\n"
"uniform sampler2D Texture;\n"
"float _c0081;\n"
"vec2 _point0081;\n"
"vec2 _tang0081;\n"
"vec2 _poc0081;\n"
"float _A0081;\n"
"float _B0081;\n"
"float _C0081;\n"
"float _a0081;\n"
"vec2 _uv0081;\n"
"float _r0081;\n"
"float _A0083;\n"
"float _B0083;\n"
"float _C0083;\n"
"float _a0089;\n"
"float _a0099;\n"
"float _negate0103;\n"
"float _x0103;\n"
"float _ret0103;\n"
"float _a0107;\n"
"float _a0111;\n"
"float _a0115;\n"
"vec2 _b0117;\n"
"float _TMP126;\n"
"float _x0127;\n"
"float _c0133;\n"
"float _a0135;\n"
"vec4 _TMP146;\n"
"vec4 _x0161;\n"
"vec2 _c0173;\n"
"vec2 _c0197;\n"
"vec2 _c0209;\n"
"vec4 _r0221;\n"
"vec4 _TMP222;\n"
"vec2 _c0229;\n"
"vec2 _c0241;\n"
"vec2 _c0253;\n"
"vec2 _c0265;\n"
"vec4 _r0277;\n"
"vec4 _TMP278;\n"
"vec4 _wid0285;\n"
"vec4 _weights0285;\n"
"vec4 _x0297;\n"
"vec4 _a0307;\n"
"vec4 _TMP316;\n"
"vec4 _x0317;\n"
"vec4 _wid0329;\n"
"vec4 _weights0329;\n"
"float _distance0329;\n"
"vec4 _x0341;\n"
"vec4 _a0351;\n"
"vec4 _TMP360;\n"
"vec4 _x0361;\n"
"vec4 _wid0373;\n"
"vec4 _weights0373;\n"
"vec4 _x0385;\n"
"vec4 _a0395;\n"
"vec4 _TMP404;\n"
"vec4 _x0405;\n"
"float _a0417;\n"
"vec4 _wid0419;\n"
"vec4 _weights0419;\n"
"vec4 _x0431;\n"
"vec4 _a0441;\n"
"vec4 _TMP450;\n"
"vec4 _x0451;\n"
"vec4 _wid0465;\n"
"vec4 _weights0465;\n"
"vec4 _x0477;\n"
"vec4 _a0487;\n"
"vec4 _TMP496;\n"
"vec4 _x0497;\n"
"float _a0509;\n"
"vec4 _wid0511;\n"
"vec4 _weights0511;\n"
"vec4 _x0523;\n"
"vec4 _a0533;\n"
"vec4 _TMP542;\n"
"vec4 _x0543;\n"
"float _c0555;\n"
"float _a0557;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _xy2;\n"
"    vec2 _cd1;\n"
"    vec2 _cd2;\n"
"    float _dist;\n"
"    vec2 _ilfloat;\n"
"    vec2 _ratio_scale;\n"
"    float _filter;\n"
"    vec2 _uv_ratio;\n"
"    vec4 _coeffs;\n"
"    vec4 _weights1;\n"
"    vec4 _weights2;\n"
"    vec3 _mul_res;\n"
"    vec3 _dotMaskWeights;\n"
"    _cd1 = TEX0.xy*(TextureSize/InputSize);\n"
"    _cd1 = ((_cd1 - vec2( 5.00000000E-01, 5.00000000E-01))*vec2( 1.00000000E+00, 7.50000000E-01))*VARstretch.z + VARstretch.xy;\n"
"    _TMP66 = dot(_cd1, _cd1);\n"
"    _A0083 = _TMP66 + 2.25000000E+00;\n"
"    _TMP67 = dot(_cd1, VARsinangle);\n"
"    _B0083 = 2.00000000E+00*(2.00000000E+00*(_TMP67 - 1.50000000E+00*VARcosangle.x*VARcosangle.y) - 2.25000000E+00);\n"
"    _C0083 = 2.25000000E+00 + 6.00000000E+00*VARcosangle.x*VARcosangle.y;\n"
"    _a0089 = _B0083*_B0083 - 4.00000000E+00*_A0083*_C0083;\n"
"    _TMP44 = inversesqrt(_a0089);\n"
"    _TMP68 = 1.00000000E+00/_TMP44;\n"
"    _c0081 = (-_B0083 - _TMP68)/(2.00000000E+00*_A0083);\n"
"    _point0081 = vec2(_c0081, _c0081)*_cd1;\n"
"    _point0081 = _point0081 - vec2( -2.00000000E+00, -2.00000000E+00)*VARsinangle;\n"
"    _point0081 = _point0081/vec2( 2.00000000E+00, 2.00000000E+00);\n"
"    _tang0081 = VARsinangle/VARcosangle;\n"
"    _poc0081 = _point0081/VARcosangle;\n"
"    _TMP37 = dot(_tang0081, _tang0081);\n"
"    _A0081 = _TMP37 + 1.00000000E+00;\n"
"    _TMP38 = dot(_poc0081, _tang0081);\n"
"    _B0081 = -2.00000000E+00*_TMP38;\n"
"    _TMP39 = dot(_poc0081, _poc0081);\n"
"    _C0081 = _TMP39 - 1.00000000E+00;\n"
"    _a0099 = _B0081*_B0081 - 4.00000000E+00*_A0081*_C0081;\n"
"    _TMP44 = inversesqrt(_a0099);\n"
"    _TMP40 = 1.00000000E+00/_TMP44;\n"
"    _a0081 = (-_B0081 + _TMP40)/(2.00000000E+00*_A0081);\n"
"    _uv0081 = (_point0081 - _a0081*VARsinangle)/VARcosangle;\n"
"    _negate0103 = float((_a0081 < 0.00000000E+00));\n"
"    _x0103 = abs(_a0081);\n"
"    _ret0103 = -1.87292993E-02*_x0103;\n"
"    _ret0103 = _ret0103 + 7.42610022E-02;\n"
"    _ret0103 = _ret0103*_x0103;\n"
"    _ret0103 = _ret0103 - 2.12114394E-01;\n"
"    _ret0103 = _ret0103*_x0103;\n"
"    _ret0103 = _ret0103 + 1.57072902E+00;\n"
"    _a0107 = 1.00000000E+00 - _x0103;\n"
"    _TMP44 = inversesqrt(_a0107);\n"
"    _TMP69 = 1.00000000E+00/_TMP44;\n"
"    _ret0103 = _ret0103*_TMP69;\n"
"    _ret0103 = _ret0103 - 2.00000000E+00*_negate0103*_ret0103;\n"
"    _TMP41 = _negate0103*3.14159298E+00 + _ret0103;\n"
"    _a0111 = 2.00000000E+00*_TMP41;\n"
"    _TMP42 = abs(_a0111);\n"
"    _r0081 = max(_TMP42, 9.99999975E-06);\n"
"    _a0115 = _r0081/2.00000000E+00;\n"
"    _TMP43 = sin(_a0115);\n"
"    _TMP0 = (_uv0081*_r0081)/_TMP43;\n"
"    _xy2 = ((_TMP0/vec2( 1.00000000E+00, 7.50000000E-01) + vec2( 5.00000000E-01, 5.00000000E-01))*InputSize)/TextureSize;\n"
"    _cd2 = _xy2*(TextureSize/InputSize);\n"
"    _cd2 = (_cd2 - vec2( 5.00000000E-01, 5.00000000E-01)) + vec2( 5.00000000E-01, 5.00000000E-01);\n"
"    _b0117 = vec2( 1.00000000E+00, 1.00000000E+00) - _cd2;\n"
"    _TMP1 = min(_cd2, _b0117);\n"
"    _cd2 = _TMP1*vec2( 1.00000000E+00, 7.50000000E-01);\n"
"    _TMP2 = min(_cd2, vec2( 2.99999993E-02, 2.99999993E-02));\n"
"    _cd2 = vec2( 2.99999993E-02, 2.99999993E-02) - _TMP2;\n"
"    _TMP3 = dot(_cd2, _cd2);\n"
"    _TMP44 = inversesqrt(_TMP3);\n"
"    _dist = 1.00000000E+00/_TMP44;\n"
"    _x0127 = (2.99999993E-02 - _dist)*1.00000000E+03;\n"
"    _TMP45 = min(1.00000000E+00, _x0127);\n"
"    _TMP126 = max(0.00000000E+00, _TMP45);\n"
"    if (VARilfac.y > 1.50000000E+00) { \n"
"        _a0135 = float(FrameCount)/2.00000000E+00;\n"
"        _TMP46 = abs(_a0135);\n"
"        _TMP47 = fract(_TMP46);\n"
"        _TMP48 = abs(2.00000000E+00);\n"
"        _c0133 = _TMP47*_TMP48;\n"
"        if (float(FrameCount) < 0.00000000E+00) { \n"
"            _TMP49 = -_c0133;\n"
"        } else {\n"
"            _TMP49 = _c0133;\n"
"        } \n"
"        _TMP4 = _TMP49;\n"
"    } else {\n"
"        _TMP4 = 0.00000000E+00;\n"
"    } \n"
"    _ilfloat = vec2(0.00000000E+00, _TMP4);\n"
"    _ratio_scale = ((_xy2*VARTextureSize - vec2( 5.00000000E-01, 5.00000000E-01)) + _ilfloat)/VARilfac;\n"
"    _filter = InputSize.y/OutputSize.y;\n"
"    _uv_ratio = fract(_ratio_scale);\n"
"    _TMP5 = floor(_ratio_scale);\n"
"    _xy2 = ((_TMP5*VARilfac + vec2( 5.00000000E-01, 5.00000000E-01)) - _ilfloat)/VARTextureSize;\n"
"    _coeffs = 3.14159274E+00*vec4(1.00000000E+00 + _uv_ratio.x, _uv_ratio.x, 1.00000000E+00 - _uv_ratio.x, 2.00000000E+00 - _uv_ratio.x);\n"
"    _TMP6 = abs(_coeffs);\n"
"    _TMP146 = max(_TMP6, vec4( 9.99999975E-06, 9.99999975E-06, 9.99999975E-06, 9.99999975E-06));\n"
"    _TMP50 = sin(_TMP146.x);\n"
"    _TMP51 = sin(_TMP146.y);\n"
"    _TMP52 = sin(_TMP146.z);\n"
"    _TMP53 = sin(_TMP146.w);\n"
"    _TMP7 = vec4(_TMP50, _TMP51, _TMP52, _TMP53);\n"
"    _x0161 = _TMP146/2.00000000E+00;\n"
"    _TMP50 = sin(_x0161.x);\n"
"    _TMP51 = sin(_x0161.y);\n"
"    _TMP52 = sin(_x0161.z);\n"
"    _TMP53 = sin(_x0161.w);\n"
"    _TMP8 = vec4(_TMP50, _TMP51, _TMP52, _TMP53);\n"
"    _coeffs = ((2.00000000E+00*_TMP7)*_TMP8)/(_TMP146*_TMP146);\n"
"    _TMP9 = dot(_coeffs, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _coeffs = _coeffs/_TMP9;\n"
"    _c0173 = _xy2 + vec2(-VARone.x, 0.00000000E+00);\n"
"    _TMP10 = COMPAT_TEXTURE(Texture, _c0173);\n"
"    _TMP54 = pow(_TMP10.x, 2.40000010E+00);\n"
"    _TMP55 = pow(_TMP10.y, 2.40000010E+00);\n"
"    _TMP56 = pow(_TMP10.z, 2.40000010E+00);\n"
"    _TMP57 = pow(_TMP10.w, 2.40000010E+00);\n"
"    _TMP11 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _TMP12 = COMPAT_TEXTURE(Texture, _xy2);\n"
"    _TMP54 = pow(_TMP12.x, 2.40000010E+00);\n"
"    _TMP55 = pow(_TMP12.y, 2.40000010E+00);\n"
"    _TMP56 = pow(_TMP12.z, 2.40000010E+00);\n"
"    _TMP57 = pow(_TMP12.w, 2.40000010E+00);\n"
"    _TMP13 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _c0197 = _xy2 + vec2(VARone.x, 0.00000000E+00);\n"
"    _TMP14 = COMPAT_TEXTURE(Texture, _c0197);\n"
"    _TMP54 = pow(_TMP14.x, 2.40000010E+00);\n"
"    _TMP55 = pow(_TMP14.y, 2.40000010E+00);\n"
"    _TMP56 = pow(_TMP14.z, 2.40000010E+00);\n"
"    _TMP57 = pow(_TMP14.w, 2.40000010E+00);\n"
"    _TMP15 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _c0209 = _xy2 + vec2(2.00000000E+00*VARone.x, 0.00000000E+00);\n"
"    _TMP16 = COMPAT_TEXTURE(Texture, _c0209);\n"
"    _TMP54 = pow(_TMP16.x, 2.40000010E+00);\n"
"    _TMP55 = pow(_TMP16.y, 2.40000010E+00);\n"
"    _TMP56 = pow(_TMP16.z, 2.40000010E+00);\n"
"    _TMP57 = pow(_TMP16.w, 2.40000010E+00);\n"
"    _TMP17 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _r0221 = _coeffs.x*_TMP11;\n"
"    _r0221 = _r0221 + _coeffs.y*_TMP13;\n"
"    _r0221 = _r0221 + _coeffs.z*_TMP15;\n"
"    _r0221 = _r0221 + _coeffs.w*_TMP17;\n"
"    _TMP58 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _r0221);\n"
"    _TMP222 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP58);\n"
"    _c0229 = _xy2 + vec2(-VARone.x, VARone.y);\n"
"    _TMP19 = COMPAT_TEXTURE(Texture, _c0229);\n"
"    _TMP54 = pow(_TMP19.x, 2.40000010E+00);\n"
"    _TMP55 = pow(_TMP19.y, 2.40000010E+00);\n"
"    _TMP56 = pow(_TMP19.z, 2.40000010E+00);\n"
"    _TMP57 = pow(_TMP19.w, 2.40000010E+00);\n"
"    _TMP20 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _c0241 = _xy2 + vec2(0.00000000E+00, VARone.y);\n"
"    _TMP21 = COMPAT_TEXTURE(Texture, _c0241);\n"
"    _TMP54 = pow(_TMP21.x, 2.40000010E+00);\n"
"    _TMP55 = pow(_TMP21.y, 2.40000010E+00);\n"
"    _TMP56 = pow(_TMP21.z, 2.40000010E+00);\n"
"    _TMP57 = pow(_TMP21.w, 2.40000010E+00);\n"
"    _TMP22 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _c0253 = _xy2 + VARone;\n"
"    _TMP23 = COMPAT_TEXTURE(Texture, _c0253);\n"
"    _TMP54 = pow(_TMP23.x, 2.40000010E+00);\n"
"    _TMP55 = pow(_TMP23.y, 2.40000010E+00);\n"
"    _TMP56 = pow(_TMP23.z, 2.40000010E+00);\n"
"    _TMP57 = pow(_TMP23.w, 2.40000010E+00);\n"
"    _TMP24 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _c0265 = _xy2 + vec2(2.00000000E+00*VARone.x, VARone.y);\n"
"    _TMP25 = COMPAT_TEXTURE(Texture, _c0265);\n"
"    _TMP54 = pow(_TMP25.x, 2.40000010E+00);\n"
"    _TMP55 = pow(_TMP25.y, 2.40000010E+00);\n"
"    _TMP56 = pow(_TMP25.z, 2.40000010E+00);\n"
"    _TMP57 = pow(_TMP25.w, 2.40000010E+00);\n"
"    _TMP26 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _r0277 = _coeffs.x*_TMP20;\n"
"    _r0277 = _r0277 + _coeffs.y*_TMP22;\n"
"    _r0277 = _r0277 + _coeffs.z*_TMP24;\n"
"    _r0277 = _r0277 + _coeffs.w*_TMP26;\n"
"    _TMP58 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _r0277);\n"
"    _TMP278 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP58);\n"
"    _TMP54 = pow(_TMP222.x, 4.00000000E+00);\n"
"    _TMP55 = pow(_TMP222.y, 4.00000000E+00);\n"
"    _TMP56 = pow(_TMP222.z, 4.00000000E+00);\n"
"    _TMP57 = pow(_TMP222.w, 4.00000000E+00);\n"
"    _TMP59 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _wid0285 = 2.00000000E+00 + 2.00000000E+00*_TMP59;\n"
"    _weights0285 = vec4(_uv_ratio.y/3.00000012E-01, _uv_ratio.y/3.00000012E-01, _uv_ratio.y/3.00000012E-01, _uv_ratio.y/3.00000012E-01);\n"
"    _x0297 = 5.00000000E-01*_wid0285;\n"
"    _TMP70 = inversesqrt(_x0297.x);\n"
"    _TMP71 = inversesqrt(_x0297.y);\n"
"    _TMP72 = inversesqrt(_x0297.z);\n"
"    _TMP73 = inversesqrt(_x0297.w);\n"
"    _TMP60 = vec4(_TMP70, _TMP71, _TMP72, _TMP73);\n"
"    _a0307 = _weights0285*_TMP60;\n"
"    _TMP54 = pow(_a0307.x, _wid0285.x);\n"
"    _TMP55 = pow(_a0307.y, _wid0285.y);\n"
"    _TMP56 = pow(_a0307.z, _wid0285.z);\n"
"    _TMP57 = pow(_a0307.w, _wid0285.w);\n"
"    _TMP61 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _x0317 = -_TMP61;\n"
"    _TMP54 = pow(2.71828198E+00, _x0317.x);\n"
"    _TMP55 = pow(2.71828198E+00, _x0317.y);\n"
"    _TMP56 = pow(2.71828198E+00, _x0317.z);\n"
"    _TMP57 = pow(2.71828198E+00, _x0317.w);\n"
"    _TMP316 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _weights1 = (1.39999998E+00*_TMP316)/(6.00000024E-01 + 2.00000003E-01*_wid0285);\n"
"    _distance0329 = 1.00000000E+00 - _uv_ratio.y;\n"
"    _TMP54 = pow(_TMP278.x, 4.00000000E+00);\n"
"    _TMP55 = pow(_TMP278.y, 4.00000000E+00);\n"
"    _TMP56 = pow(_TMP278.z, 4.00000000E+00);\n"
"    _TMP57 = pow(_TMP278.w, 4.00000000E+00);\n"
"    _TMP59 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _wid0329 = 2.00000000E+00 + 2.00000000E+00*_TMP59;\n"
"    _weights0329 = vec4(_distance0329/3.00000012E-01, _distance0329/3.00000012E-01, _distance0329/3.00000012E-01, _distance0329/3.00000012E-01);\n"
"    _x0341 = 5.00000000E-01*_wid0329;\n"
"    _TMP70 = inversesqrt(_x0341.x);\n"
"    _TMP71 = inversesqrt(_x0341.y);\n"
"    _TMP72 = inversesqrt(_x0341.z);\n"
"    _TMP73 = inversesqrt(_x0341.w);\n"
"    _TMP60 = vec4(_TMP70, _TMP71, _TMP72, _TMP73);\n"
"    _a0351 = _weights0329*_TMP60;\n"
"    _TMP54 = pow(_a0351.x, _wid0329.x);\n"
"    _TMP55 = pow(_a0351.y, _wid0329.y);\n"
"    _TMP56 = pow(_a0351.z, _wid0329.z);\n"
"    _TMP57 = pow(_a0351.w, _wid0329.w);\n"
"    _TMP61 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _x0361 = -_TMP61;\n"
"    _TMP54 = pow(2.71828198E+00, _x0361.x);\n"
"    _TMP55 = pow(2.71828198E+00, _x0361.y);\n"
"    _TMP56 = pow(2.71828198E+00, _x0361.z);\n"
"    _TMP57 = pow(2.71828198E+00, _x0361.w);\n"
"    _TMP360 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _weights2 = (1.39999998E+00*_TMP360)/(6.00000024E-01 + 2.00000003E-01*_wid0329);\n"
"    _uv_ratio.y = _uv_ratio.y + 3.33333343E-01*_filter;\n"
"    _TMP54 = pow(_TMP222.x, 4.00000000E+00);\n"
"    _TMP55 = pow(_TMP222.y, 4.00000000E+00);\n"
"    _TMP56 = pow(_TMP222.z, 4.00000000E+00);\n"
"    _TMP57 = pow(_TMP222.w, 4.00000000E+00);\n"
"    _TMP59 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _wid0373 = 2.00000000E+00 + 2.00000000E+00*_TMP59;\n"
"    _weights0373 = vec4(_uv_ratio.y/3.00000012E-01, _uv_ratio.y/3.00000012E-01, _uv_ratio.y/3.00000012E-01, _uv_ratio.y/3.00000012E-01);\n"
"    _x0385 = 5.00000000E-01*_wid0373;\n"
"    _TMP70 = inversesqrt(_x0385.x);\n"
"    _TMP71 = inversesqrt(_x0385.y);\n"
"    _TMP72 = inversesqrt(_x0385.z);\n"
"    _TMP73 = inversesqrt(_x0385.w);\n"
"    _TMP60 = vec4(_TMP70, _TMP71, _TMP72, _TMP73);\n"
"    _a0395 = _weights0373*_TMP60;\n"
"    _TMP54 = pow(_a0395.x, _wid0373.x);\n"
"    _TMP55 = pow(_a0395.y, _wid0373.y);\n"
"    _TMP56 = pow(_a0395.z, _wid0373.z);\n"
"    _TMP57 = pow(_a0395.w, _wid0373.w);\n"
"    _TMP61 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _x0405 = -_TMP61;\n"
"    _TMP54 = pow(2.71828198E+00, _x0405.x);\n"
"    _TMP55 = pow(2.71828198E+00, _x0405.y);\n"
"    _TMP56 = pow(2.71828198E+00, _x0405.z);\n"
"    _TMP57 = pow(2.71828198E+00, _x0405.w);\n"
"    _TMP404 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _TMP28 = (1.39999998E+00*_TMP404)/(6.00000024E-01 + 2.00000003E-01*_wid0373);\n"
"    _weights1 = (_weights1 + _TMP28)/3.00000000E+00;\n"
"    _a0417 = 1.00000000E+00 - _uv_ratio.y;\n"
"    _TMP29 = abs(_a0417);\n"
"    _TMP54 = pow(_TMP278.x, 4.00000000E+00);\n"
"    _TMP55 = pow(_TMP278.y, 4.00000000E+00);\n"
"    _TMP56 = pow(_TMP278.z, 4.00000000E+00);\n"
"    _TMP57 = pow(_TMP278.w, 4.00000000E+00);\n"
"    _TMP59 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _wid0419 = 2.00000000E+00 + 2.00000000E+00*_TMP59;\n"
"    _weights0419 = vec4(_TMP29/3.00000012E-01, _TMP29/3.00000012E-01, _TMP29/3.00000012E-01, _TMP29/3.00000012E-01);\n"
"    _x0431 = 5.00000000E-01*_wid0419;\n"
"    _TMP70 = inversesqrt(_x0431.x);\n"
"    _TMP71 = inversesqrt(_x0431.y);\n"
"    _TMP72 = inversesqrt(_x0431.z);\n"
"    _TMP73 = inversesqrt(_x0431.w);\n"
"    _TMP60 = vec4(_TMP70, _TMP71, _TMP72, _TMP73);\n"
"    _a0441 = _weights0419*_TMP60;\n"
"    _TMP54 = pow(_a0441.x, _wid0419.x);\n"
"    _TMP55 = pow(_a0441.y, _wid0419.y);\n"
"    _TMP56 = pow(_a0441.z, _wid0419.z);\n"
"    _TMP57 = pow(_a0441.w, _wid0419.w);\n"
"    _TMP61 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _x0451 = -_TMP61;\n"
"    _TMP54 = pow(2.71828198E+00, _x0451.x);\n"
"    _TMP55 = pow(2.71828198E+00, _x0451.y);\n"
"    _TMP56 = pow(2.71828198E+00, _x0451.z);\n"
"    _TMP57 = pow(2.71828198E+00, _x0451.w);\n"
"    _TMP450 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _TMP30 = (1.39999998E+00*_TMP450)/(6.00000024E-01 + 2.00000003E-01*_wid0419);\n"
"    _weights2 = (_weights2 + _TMP30)/3.00000000E+00;\n"
"    _uv_ratio.y = _uv_ratio.y - 6.66666687E-01*_filter;\n"
"    _TMP31 = abs(_uv_ratio.y);\n"
"    _TMP54 = pow(_TMP222.x, 4.00000000E+00);\n"
"    _TMP55 = pow(_TMP222.y, 4.00000000E+00);\n"
"    _TMP56 = pow(_TMP222.z, 4.00000000E+00);\n"
"    _TMP57 = pow(_TMP222.w, 4.00000000E+00);\n"
"    _TMP59 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _wid0465 = 2.00000000E+00 + 2.00000000E+00*_TMP59;\n"
"    _weights0465 = vec4(_TMP31/3.00000012E-01, _TMP31/3.00000012E-01, _TMP31/3.00000012E-01, _TMP31/3.00000012E-01);\n"
"    _x0477 = 5.00000000E-01*_wid0465;\n"
"    _TMP70 = inversesqrt(_x0477.x);\n"
"    _TMP71 = inversesqrt(_x0477.y);\n"
"    _TMP72 = inversesqrt(_x0477.z);\n"
"    _TMP73 = inversesqrt(_x0477.w);\n"
"    _TMP60 = vec4(_TMP70, _TMP71, _TMP72, _TMP73);\n"
"    _a0487 = _weights0465*_TMP60;\n"
"    _TMP54 = pow(_a0487.x, _wid0465.x);\n"
"    _TMP55 = pow(_a0487.y, _wid0465.y);\n"
"    _TMP56 = pow(_a0487.z, _wid0465.z);\n"
"    _TMP57 = pow(_a0487.w, _wid0465.w);\n"
"    _TMP61 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _x0497 = -_TMP61;\n"
"    _TMP54 = pow(2.71828198E+00, _x0497.x);\n"
"    _TMP55 = pow(2.71828198E+00, _x0497.y);\n"
"    _TMP56 = pow(2.71828198E+00, _x0497.z);\n"
"    _TMP57 = pow(2.71828198E+00, _x0497.w);\n"
"    _TMP496 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _TMP32 = (1.39999998E+00*_TMP496)/(6.00000024E-01 + 2.00000003E-01*_wid0465);\n"
"    _weights1 = _weights1 + _TMP32/3.00000000E+00;\n"
"    _a0509 = 1.00000000E+00 - _uv_ratio.y;\n"
"    _TMP33 = abs(_a0509);\n"
"    _TMP54 = pow(_TMP278.x, 4.00000000E+00);\n"
"    _TMP55 = pow(_TMP278.y, 4.00000000E+00);\n"
"    _TMP56 = pow(_TMP278.z, 4.00000000E+00);\n"
"    _TMP57 = pow(_TMP278.w, 4.00000000E+00);\n"
"    _TMP59 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _wid0511 = 2.00000000E+00 + 2.00000000E+00*_TMP59;\n"
"    _weights0511 = vec4(_TMP33/3.00000012E-01, _TMP33/3.00000012E-01, _TMP33/3.00000012E-01, _TMP33/3.00000012E-01);\n"
"    _x0523 = 5.00000000E-01*_wid0511;\n"
"    _TMP70 = inversesqrt(_x0523.x);\n"
"    _TMP71 = inversesqrt(_x0523.y);\n"
"    _TMP72 = inversesqrt(_x0523.z);\n"
"    _TMP73 = inversesqrt(_x0523.w);\n"
"    _TMP60 = vec4(_TMP70, _TMP71, _TMP72, _TMP73);\n"
"    _a0533 = _weights0511*_TMP60;\n"
"    _TMP54 = pow(_a0533.x, _wid0511.x);\n"
"    _TMP55 = pow(_a0533.y, _wid0511.y);\n"
"    _TMP56 = pow(_a0533.z, _wid0511.z);\n"
"    _TMP57 = pow(_a0533.w, _wid0511.w);\n"
"    _TMP61 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _x0543 = -_TMP61;\n"
"    _TMP54 = pow(2.71828198E+00, _x0543.x);\n"
"    _TMP55 = pow(2.71828198E+00, _x0543.y);\n"
"    _TMP56 = pow(2.71828198E+00, _x0543.z);\n"
"    _TMP57 = pow(2.71828198E+00, _x0543.w);\n"
"    _TMP542 = vec4(_TMP54, _TMP55, _TMP56, _TMP57);\n"
"    _TMP34 = (1.39999998E+00*_TMP542)/(6.00000024E-01 + 2.00000003E-01*_wid0511);\n"
"    _weights2 = _weights2 + _TMP34/3.00000000E+00;\n"
"    _mul_res = (_TMP222*_weights1 + _TMP278*_weights2).xyz;\n"
"    _mul_res = _mul_res*vec3(_TMP126, _TMP126, _TMP126);\n"
"    _a0557 = VARmod_factor/2.00000000E+00;\n"
"    _TMP46 = abs(_a0557);\n"
"    _TMP47 = fract(_TMP46);\n"
"    _TMP48 = abs(2.00000000E+00);\n"
"    _c0555 = _TMP47*_TMP48;\n"
"    if (VARmod_factor < 0.00000000E+00) { \n"
"        _TMP49 = -_c0555;\n"
"    } else {\n"
"        _TMP49 = _c0555;\n"
"    } \n"
"    _TMP36 = floor(_TMP49);\n"
"    _dotMaskWeights = vec3( 1.00000000E+00, 6.99999988E-01, 1.00000000E+00) + _TMP36*vec3( -3.00000012E-01, 3.00000012E-01, -3.00000012E-01);\n"
"    _mul_res = _mul_res*_dotMaskWeights;\n"
"    _TMP63 = pow(_mul_res.x, 4.54545438E-01);\n"
"    _TMP64 = pow(_mul_res.y, 4.54545438E-01);\n"
"    _TMP65 = pow(_mul_res.z, 4.54545438E-01);\n"
"    _mul_res = vec3(_TMP63, _TMP64, _TMP65);\n"
"    _ret_0 = vec4(_mul_res.x, _mul_res.y, _mul_res.z, 1.00000000E+00);\n"
"    FragColor = _ret_0;\n"
"    return;\n"
"} \n"
"#endif\n"
},
